/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SqlQueryResult.java
 *
 * Created on 15/02/2011, 02:56:35 PM
 */
package com.py.mbaez.porandu.views;

import com.py.mbaez.porandu.components.EditableTableModel;
import com.py.mbaez.porandu.components.TreePopupMenu;
import com.py.mbaez.porandu.components.TreeView;
import com.py.mbaez.porandu.util.FileIO;
import com.py.mbaez.porandu.managers.QueryManager;
import com.py.mbaez.porandu.managers.SessionManager;
import com.py.mbaez.porandu.plugin.MysqlTree;
import com.py.mbaez.porandu.plugin.PostgresTree;
import com.py.mbaez.porandu.plugin.SchemaTreeCellRenderer;
import com.py.mbaez.porandu.plugin.SqlServerTree;
import com.py.mbaez.porandu.plugin.SqliteTree;
import com.py.mbaez.porandu.plugin.TreeElement;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author mxbg
 */
public class SqlQueryResult extends javax.swing.JPanel {

    private QueryManager query;
    private int connexionIndex;
    private Thread thread;
    private TreeView rootNode;

    /**
     * Creates new form SqlQueryResult
     */
    public SqlQueryResult(int connexionIndex) {
        this.connexionIndex = connexionIndex;
        try {
            createNodes();
        } catch (Exception e) {
            e.printStackTrace();
        }
        initComponents();
        initTreeMenu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        karakuSplitPane = new javax.swing.JSplitPane();
        javax.swing.JEditorPane editorPane= new javax.swing.JEditorPane();
        queryScrollPane = new javax.swing.JScrollPane(editorPane);
        queryEditorPane = editorPane;
        ResultTabbedPane = new javax.swing.JTabbedPane();
        resultScrollPane = new javax.swing.JScrollPane();
        resulTable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        messagesTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablesTree = new javax.swing.JTree(rootNode);

        setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setContinuousLayout(true);
        jSplitPane1.setOneTouchExpandable(true);

        karakuSplitPane.setDividerLocation(150);
        karakuSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        karakuSplitPane.setContinuousLayout(true);
        karakuSplitPane.setOneTouchExpandable(true);

        queryScrollPane.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 1, 0, java.awt.SystemColor.windowBorder));
        queryScrollPane.setMinimumSize(new java.awt.Dimension(100, 100));

        queryEditorPane.setContentType("text/sql"); // NOI18N
        queryEditorPane.setFont(new java.awt.Font("Monospaced", 0, 15)); // NOI18N
        queryScrollPane.setViewportView(queryEditorPane);

        karakuSplitPane.setLeftComponent(queryScrollPane);

        resulTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        resulTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        resulTable.setColumnSelectionAllowed(true);
        resultScrollPane.setViewportView(resulTable);

        ResultTabbedPane.addTab("Output", resultScrollPane);

        messagesTextArea.setColumns(20);
        messagesTextArea.setRows(5);
        jScrollPane1.setViewportView(messagesTextArea);

        ResultTabbedPane.addTab("Messages", jScrollPane1);

        karakuSplitPane.setBottomComponent(ResultTabbedPane);

        jSplitPane1.setRightComponent(karakuSplitPane);

        tablesTree.setCellRenderer(loadThreeIcons());
        jScrollPane2.setViewportView(tablesTree);

        jSplitPane1.setLeftComponent(jScrollPane2);

        add(jSplitPane1);
    }// </editor-fold>//GEN-END:initComponents

    public void ejecutarLocalQuery() {
        if (thread != null && thread.isAlive()) {
            System.out.println(thread.getState());
            return;
        }
        thread = (new Thread() {

            public void run() {
                ejecutarThread();
            }
        });
        thread.start();
    }

    public void cancelarLocalQuery() {
        try {
            query.cancel();
            System.out.println("stoped");
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void ejecutarThread() {
        try {
            ResultTabbedPane.setSelectedIndex(0);
            TableModel modelo = resulTable.getModel();
            if (modelo instanceof EditableTableModel) {
                ((EditableTableModel) modelo).removeRow();
            }

            String sqlText = queryEditorPane.getSelectedText();
            if (sqlText == null || sqlText.equals("")) {
                sqlText = queryEditorPane.getText();
            }

            query = new QueryManager(SqlQueryResult.this.connexionIndex);
            resulTable.setModel(query.execute(sqlText));
        } catch (SQLException e) {

            messagesTextArea.setText("Error : " + e.getMessage());
            ResultTabbedPane.setSelectedIndex(1);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(SqlQueryResult.this, e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }

    /**
     *
     */
    public void guardarLocalResult() {
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            ArrayList<Object[]> data = new ArrayList<Object[]>();
            //Obtiene el modelo de la tabla
            EditableTableModel model = (EditableTableModel) resulTable.getModel();
            //Anhade el nombre de las columnas de la tabla para que sean visibles
            //cabecera en el archivo
            data.add(model.getColumnIdentifiers());
            //anhade las filas
            for (int i = 0; i < resulTable.getRowCount(); i++) {
                data.add(model.getValueAt(i));
            }
            //gurada el archivo
            FileIO file = new FileIO(fileChooser.getSelectedFile().getAbsolutePath());
            file.saveFile(data);
        }

    }

    /**
     *
     */
    public void guardarLocalQuery() {
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            ArrayList<Object[]> data = new ArrayList<Object[]>();
            //Obtiene el texto del editor
            data.add(new Object[]{this.queryEditorPane.getText()});
            //gurada el archivo
            FileIO file = new FileIO(fileChooser.getSelectedFile().
                    getAbsolutePath());
            file.saveFile(data);
        }

    }

    public SchemaTreeCellRenderer loadThreeIcons() {
        return new SchemaTreeCellRenderer();
    }

    private void initTreeMenu() {
        this.tablesTree.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    int selRow = tablesTree.getRowForLocation(e.getX(), e.getY());
                    TreePath selPath = tablesTree.getPathForLocation(e.getX(), e.getY());
                    tablesTree.setSelectionPath(selPath);
                    if (selRow > -1) {
                        tablesTree.setSelectionRow(selRow);
                    }
                    TreePath path = tablesTree.getPathForLocation(e.getX(), e.getY());
                    Rectangle pathBounds = tablesTree.getUI().getPathBounds(tablesTree, path);
                    if (pathBounds != null && pathBounds.contains(e.getX(), e.getY())) {

                        DefaultMutableTreeNode node = (DefaultMutableTreeNode) tablesTree.getLastSelectedPathComponent();
                        TreeElement el = (TreeElement) node.getUserObject();
                        System.out.println(el.getName());
                        JPopupMenu menu = new TreePopupMenu(el);
                        menu.show(tablesTree, pathBounds.x, pathBounds.y + pathBounds.height);
                    }
                }
            }
        });
    }

    /**
     *
     */
    private void createNodes() throws SQLException {
        Connection conexion = SessionManager.CURRENTCONEXION.get(connexionIndex);
        String driver = conexion.getClass().getName().toLowerCase();
        System.out.println(driver);
        if (driver.contains("com.mysql.jdbc")) {
            rootNode = new MysqlTree(conexion);
        } else if (driver.contains("org.postgresql.jdbc")) {
            rootNode = new PostgresTree(conexion);
        } else if (driver.contains("org.sqlite")) {
            rootNode = new SqliteTree(conexion);
        } else if (driver.contains("com.microsoft.sqlserver.jdbc")) {
            rootNode = new SqlServerTree(conexion);
        } else {
            rootNode = new TreeView(conexion);
        }
        rootNode.buildTree();

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane ResultTabbedPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane karakuSplitPane;
    private javax.swing.JTextArea messagesTextArea;
    private javax.swing.JEditorPane queryEditorPane;
    private javax.swing.JScrollPane queryScrollPane;
    private javax.swing.JTable resulTable;
    private javax.swing.JScrollPane resultScrollPane;
    private javax.swing.JTree tablesTree;
    // End of variables declaration//GEN-END:variables
}
